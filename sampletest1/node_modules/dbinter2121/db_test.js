const mysql = require('mysql2');
var connection = ""
var logged = false
const system_databases = ["information_schema", "sys", "performance_schema", "mysql"];
let connect

// var connection= mysql.createConnection({
//     host: 'localhost',
//     database: 'mytestdb',
//     user: 'myuser',
//     password: 'mypss'
// })

// connection.promise().query("SELECT 1").then((data)=>{
//     console.log('success');
// }).catch((err)=>{
//     console.log('error');
// })

function auth(password) {
    return new Promise(async function(resolve, reject) {
        connection = await mysql.createConnection({
            user: 'root',
            password: password
        })
        connection.promise().query("SELECT 1").then((data) => {
            logged = true;
            //  console.log('connection on db',connection);
            resolve('success');
            console.log('success');
        }).catch((err) => {
            logged = false;
            // console.log(err.sql);
            // console.log(err); 
            connection = ""
            reject('error')
            console.log('wrong pass');
        })
    })
}

function db_connect(db) {
    connect = connection;
    return new Promise(async function(resolve, reject) {
        connect.query(`use ${db} `, async function(err, result) {
            if (err)
                reject(err)
            else {
                await DataDb(connect).then((data) => {
                    // console.log('data : ',data);
                    resolve(data);
                });

            }
        })
    })
}

async function DataDb(connect) {
    // console.log('it came to DataDb');
    return new Promise(function(resolve, reject) {
        connect.query(`show tables `, async function(err, result) {
            if (err) {
                //    console.log(err);
                reject(err)
            } else {
                // console.log('result on datadb',result);
                resolve(result)
            }
        })
    })

}

async function get_DataBases() {
    if (connection != "" && logged) {
        return new Promise(async function(resolve, reject) {
            connection.query(`show databases `, async function(err, result) {
                if (err)
                    reject(err)
                else {
                    //   console.log('result',result);
                    const res = []
                    await result.forEach((db) => {
                        if (system_databases.indexOf(db.Database) == -1) {
                            //   console.log(db.Database);
                            //   console.log("found",system_databases.indexOf(db.Database)); 
                            res.push(db.Database);
                        }
                    })
                    resolve(res)
                }
            })
        })
    }
}

function create(table_name, sql_String, primary, sno_found) {
    console.log("inside the create fun " + sql_String);
    console.log('primary : ', primary);
    var sql = "`" + `create table if not exists ${table_name}(`;
    if (!primary && !sno_found) {
        sql += `SNO Integer auto_increment primary key,`;
    }
    sql += sql_String + ')' + "`";

    console.log(sql);
    return new Promise((resolve, reject) => {

        connect.query(eval(sql), function(err, result) {
                if (err) {
                    console.log(err);
                    reject(err);
                } else {

                    resolve('table ' + '"' + table_name + '"' + ' created successfully');
                }
            })
            //    connect.close();
    })
}

function gettable() {
    return new Promise((resolve, reject) => {
        connect.query(`show tables`, function(err, result) {
            if (err) {
                reject(err)
            } else {
                //   console.log('this is called from db' ,result);
                resolve(result)
            }
        })
    })
}

// gettable().then((d)=>{
//     d.forEach(element => {
//         console.log(element.Tables_in_mytestdb);
//         // console.log('table name :',JSON.stringify(element.Tables_in_mytestdb),"  : ",'\n')
//     //    scema(element.Tables_in_mytestdb).then(data=>console.log('table name :',JSON.stringify(element.Tables_in_mytestdb),"  : ",data,'\n'));
//         console.log('table : ',element.Tables_in_mytestdb);   
//     });
//     // console.log('table : ',d.length);   

//     // console.log(d);
// }).catch((e)=>{
//     console.error(e);
// })


function scema(tables) {
    return new Promise(function(resolve, reject) {
        connect.query(`describe ${tables}`, function(err, result) {
            if (err) {
                reject(err)
            } else {
                resolve(result)
            }
        })
    })
}

function select(table_name) {
    return new Promise(function(resolve, reject) {
        connect.query(`
      select * from ${table_name}
      `, function(err, result) {
            if (err) {
                reject(err);
            } else {
                resolve(result)
            }
        })
    })
}

function deletetable(table_name) {
    return new Promise(function(resolve, reject) {
        connect.query(`
      drop table ${table_name};
      `, function(err, result) {
            if (err) {
                resolve();
            } else {
                reject();
            }
        })
    })
}

function changeColumnName(table, old_col, new_col) {
    return new Promise(function(resolve, reject) {
        connect.query(`
      ALTER TABLE ${table} RENAME COLUMN ${old_col} TO ${new_col};
      `, function(err, result) {
            if (err) {
                console.error(err);
                reject('error')
            } else
                resolve('column name is change of table ', table);
        })
    })
}

// scema('logi').then((D)=>console.log(D))

// scema('loginss').then((data)=>{

//     data.forEach(ety => {
//         console.log(ety);
//         // console.log(ety.Field);
//     });
//     // console.log(data);
// }).catch((e)=>{
//     console.error(e);
// })

// select(table).then((d)=>{
//     console.log('inside the ');
//     var scem;
//    let task=async()=>scema(table).then((data)=>{
//        scem=data;
//         // console.log(data);
//     }).catch((e)=>{
//         console.error(e);
//     })
//     task(); 
//     if(scem!=null){

//      scem.forEach(e => {
//         console.log(e);
//          d.forEach(t => {
//             console.log(t.e); 
//         });     
//      });       


// }
// })
// .catch((e)=>{
//     console.log(e);
// })

function drop(table_name) {
    return new Promise((resolve, reject) => {
        connect.query(`drop table ${table_name}`, function(err, result) {
            if (err) {
                reject(err)
            } else {
                resolve(result)
            }
        })
    })
}

function dropalldata(table_name) {
    return new Promise((resolve, reject) => {
        connect.query(`Delete from ${table_name}`, function(err, result) {
            if (err) {
                reject(err)
            } else {
                resolve(result)
            }
        })
    })
}

function changeName(prev_name, new_name) {
    return new Promise(function(resolve, reject) {
        connect.query(`
ALTER TABLE ${prev_name}   
RENAME TO ${new_name};  
`, function(err, result) {
            if (err) {

                reject(err)
            } else {
                console.log('table name change succesfully to', new_name);
                resolve('table name change succesfully to', new_name);
            }
        })

    })
}

function insert(table, data) {
    console.log('came at db /insert');
    var length = data.length;
    var str = '';
    for (let i = 0; i < length; i++) {
        str += "'";
        str += data[i];
        str += "'";
        if (i != length - 1)
            str += ",";

    }
    //   console.log('at insertt');
    return new Promise(function(resolve, reject) {
        connect.query(`
      insert into ${table} values(${str});
      `, function(err, result) {
            if (err)
                reject(err);
            else
                resolve('data is inserted successfully');
        })

    })

}

async function delete_entry(table, condition) {
    return new Promise(function(resolve, reject) {
        connect.query(`
        delete from ${table} where ${condition};
        `, function(err, result) {
            if (err)
                reject(err);
            else
                resolve('deleted');
        })
    })
}

async function update_data(table, update_string, condition) {
    return new Promise(function(resolve, reject) {
        connect.query(`
        update ${table} set ${update_string} 
        where ${condition};
        `, function(err, result) {
            if (err)
                reject(err);
            else
                resolve('deleted');
        })
    })
}

async function search_data(table, search_by, search) {
    let search_pattern = search + '%';
    return new Promise(function(resolve, reject) {
        connect.query(`
        SELECT * FROM ${table}
        WHERE ${search_by} LIKE '${search_pattern}'; 
        `, function(err, result) {
            if (err)
                reject(err);
            else
                resolve(result);
        })
    })
}

async function logout() {
    await auth("$XXXXXX$").then((e) => {
        console.log('not logout');
    }).catch((e) => {
        console.log('logout');
    })
}

module.exports = {
    get_DataBases,
    auth,
    connection,
    db_connect,
    delete_entry,
    mysql,
    update_data,
    create,
    search_data,
    changeColumnName,
    drop,
    gettable,
    scema,
    select,
    deletetable,
    changeName,
    dropalldata,
    insert,
    logout
}