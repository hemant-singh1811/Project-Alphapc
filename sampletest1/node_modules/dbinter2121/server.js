const express = require('express');
const { get_DataBases, auth, delete_entry, search_data, connection, update_data, db_connect, create, gettable, select, scema, changeColumnName, insert, deletetable, dropalldata, changeName, logout } = require('./db_test')
const server = express();
var logged = false
var scem;
var table;
var emt;
var selected_db;
var urls;

let port = process.env.port || 5432

server.set('view engine', 'hbs');
server.use(express.static(__dirname + '/views/'));
server.set('views', __dirname+'/views')
server.use(express.json())
server.use(express.urlencoded({ extended: true }));

server.get('/', (req, res) => {
    res.redirect('/auth')
})

server.get('/auth/', async(req, res) => {
    let file = __dirname + '/views/auth/login.html';
    logged = false

    await auth('xxx').then((d) => {
            console.log("d : ", d)
        })
        .catch((e) => {
            console.log("e : ", e)
        })

    res.sendFile(file)
})

server.post("/sample", (req, res) => {  

    
}
)

server.post('/auth#/', async(req, res) => {
    var pass = req.body.password;
    console.log(pass);

    if (pass == 'mypass') {
        res.send('logged')
    } else {
        res.send('wrong')
    }
})

server.get('/databases/', async(req, res) => {
    console.log('logged /db', logged);
    if (!logged)
        res.redirect('/auth')
    else {
        const system_databases = ["information_schema", "sys", "performance_schema", "mysql"];

        let check = req.query.checks;
        get_DataBases()
            .then((data) => {
                console.log(data);
                if (check)
                    res.send(data)
                else
                    res.render('databases.hbs', {server:"http://localhost:"+port, databases: data, sys_databases: system_databases });
            })
            .catch((err) => {
                console.log(err);
            })
    }
})

server.get('/tabless', async(req, res) => {
    console.log('it came to tabless');
    let db = req.query.db;

    res.redirect('/db')

})

server.get('/:name/db', async(req, res) => {
    console.log(logged);
    if (!logged) {
        res.redirect('/auth')
        return;
    } else {
        var db_name = req.params.name;
        selected_db = db_name;
        let check = req.query.checks;
        console.log('check', check);
        console.log('db_name from /:name', db_name);
        await db_connect(db_name).then((data) => {
            var str = 'Tables_in_' + db_name
            var all_tables = [];
            var url = [];
            data.forEach(element => {
                all_tables.push(element[str]);
                var str1 = '/' + db_name + '/table/' + element;
                url.push(str1)
            });
            urls = url;
            console.log(all_tables);
            if (check)
                res.send(data)
            else
                res.render('home.hbs', { title: 'hbs', db_name: db_name, all_tables: all_tables })
            return;
        }).catch((err) => {
            res.send(err)
            return;
        })
    }
})

server.post('/form_url', (req, res) => res.send(urls));

server.get("/logout", async(req, res) => {
    await logout()
    logged = false;
    console.log("done till now");
    res.redirect('/auth')
})

// server.get('/table', async (req, res) => {
//     if (!logged) {
//         res.redirect('/auth')
//         return;
//     }
//     let data;
//     await gettable().then((d) => {
//         //   console.log(d);
//         data = d;
//         console.log('this is from server ', d);
//     }).catch(async (e) => {
//         console.log(e);
//         console.log('error occur during the geeting table.');
//         if (req.query.check == 'true') {
//             res.send('error')
//         } else
//             res.sendFile(__dirname + '/basic.html')

//     })
//     if (req.query.check == 'true') {
//         console.log('this is trigged');
//         res.send(data)
//     }
//     else
//         res.render('home.hbs', { title: 'hbs', display_message: data })
// })

server.get('/table/:table_name/', async(req, res) => {
    console.log(logged);
    if (!logged) {
        res.redirect('/auth')
        return;
    } else {
        console.log('this is by table/:table_name');
        table = req.params.table_name;
        await get1(table).then(() => {
            console.log('empty : ', emt);
            console.log('scema', scem);
            res.render('show.hbs', { title: table, emt: emt, scema: scem, db: selected_db })

        }).catch((err) => {
            let url = '/' + selected_db + '/db/'
            res.redirect(url)
            console.log(err);
        })
    }
})

// server.get('/table/:table_name/', get1,async (req, res) => {
//     console.log('at getting table fuck/table/:name'+req.query.table_name);
//     console.log(logged);
//     if (!logged) {
//         res.redirect('/auth')
//         return;
//     }
//     else { 
//         table = req.query.table_name ; 
//         console.log('table');
//         res.render('show.hbs', { title: table, emt: emt, scema: scem }) 
//     }
// })

async function get1(table_name) {
    return new Promise(async function(resolve, reject) {
        let table = table_name;
        empt = '';
        let resolved = false;
        await gettable()
            .then(async function(data) {
                // console.log('all tables', data);
                let search = 'Tables_in_' + selected_db;
                // console.log('url ', search);
                await data.forEach(async function(element) {
                    // console.log('element[search] : ', element[search]);
                    if (element[search] == table) {
                        console.log('table is found');
                        resolved = true;
                        try {
                            select(table).then(async function(data1) {
                                if (data1.length == 0) emt = 'table is empty';
                                else emt = '';
                            }).catch((err) => {
                                console.log(err);
                            })
                            await scema(table).then(async function(d) {
                                scem = d;
                                resolve()
                                return;
                            }).catch((er) => {
                                console.log(er);
                            })
                        } catch (error) {

                        }
                    }
                });
                console.log('resolved : ', resolved);
                if (!resolved)
                    reject()
            })
            .catch((err) => {
                reject()
                return;
            })

    })
}

server.post('/auth', async(req, res) => {
    if (!logged) {
        var pass = req.body.password;
        console.log("pass : ", pass);
        if (pass == 'undefined') {
            logged = false;
            res.redirect('/auth')
        }
        auth(pass)
            .then((data) => {
                logged = true;
                res.send('logged')
                return;
            }).catch((err) => {
                logged = false;
                res.send('wrong')
                return;
            })
    } else {
        res.send('logged')
    }
})

server.get('/table_/data_', async(req, res) => {
    let table = req.query.table;
    await select(table).then((data1) => {
        // var tableEntry = [];
        // tableEntry.push(data1);
        // tableEntry.push(scem);
        res.send(data1)
    })
})

server.get('/table_/scema_', (req, res) => {
    var table = req.query.table;
    // console.log("it came to here");
    // console.log('backend', table);
    scema(table).then((data) => {
        // console.log('server data', data);
        scem = data;
        res.send(data)
    }).catch((err) => {
        res.send(500, err); //fail response send to client 
    })
})

server.get('/insert', (req, res) => {
    var table = req.query.table;
    // console.log(table);
    var arr = [];
    scema(table).then((data) => {
        data.forEach(d => {
            var fill = d.Field;
            var ev = 'req.query.';
            ev += fill;
            console.log(ev);
            console.log('req', eval(ev));
            arr.push(eval(ev));
        })
        console.log(arr);
        insert(table, arr).then((data) => {
            console.log(data);
            // var url='/table/'+table;
            var url = '/table/' + table;
            // console.log(url);
            res.redirect(url);
            // res.redirect(url);
        }).catch((e) => {
            console.log(e);
        })
    });
    // res.send('this is repond back')
})

server.get('/changeColumnName', (req, res) => {
    console.log('change name');
    var table = req.query.table;
    var old_name = req.query.prev_name;
    var new_name = req.query.new_name;
    changeColumnName(table, old_name, new_name).then((d) => {
        console.log('succes');
        res.send(d);
    }).catch((d) => {
        console.log('fail');
        res.send(d)
    })

})

server.post('/create/:name', async(req, res) => {
    let db_name = req.params.name;
    var total_colums = req.body.total;
    var table_name = req.body.table_name;
    table_name = table_name.trim().toUpperCase();
    table_name = table_name.replace(/[&\/\\#,+()$~%.'": *?<>{}]+/g, "_");
    console.log('table_name  : ' + table_name);
    console.log(total_colums);
    console.log("req.body : " + req.body);
    //    console.log('total no. of colums = ',total_colums);
    var sql_String = "";
    var pm = false;
    var sno_found = false;
    for (let i = 1; i <= total_colums; i++) {
        var input = "ipt" + i;
        input = input.toString();
        var reqs = 'req.body.' + input

        var primary = false;
        if (req.body.radio == i) {
            primary = true;
            pm = true;
            console.log('radion button is undefined');
        }
        console.log("radio btn active on ", reqs, req.body.radio);
        //   console.log("ipt :"+input);
        //   console.log("req.body.s :",eval('req.body.'+input));
        // var add = eval(reqs)
        // add = add.toUpperCase(); //not working 
        var sq = eval(reqs)
            // console.log('sq',sq); 
        sq = sq.trim().toUpperCase().replace(/[&\/\\#,+()$~%.'": *?<>{}]+/g, '-', "_");
        if (sq == 'SNO') {
            sno_found = true
        }
        sql_String += sq;
        sql_String += " ";
        input = "TYPE" + i;
        reqs = 'req.body.' + input
            // console.log(eval(reqs));
            // console.log("input : ",input);
            // console.log("req.body : "+ eval('req.body.'+input));
        if (eval(reqs) == "Number") {
            sql_String += "Integer";
            if (primary)
                sql_String += " Primary Key "
            if (i != total_colums)
                sql_String += ",";
        }
        if (eval(reqs) == "Charcters") {
            sql_String += "varchar(60)";
            if (primary)
                sql_String += " Primary Key "
            if (i != total_colums)
                sql_String += ",";
        }
        if (eval(reqs) == "date") {
            sql_String += "timestamp";
            if (primary)
                sql_String += " Primary Key "
            if (i != total_colums)
                sql_String += ",";
        }


        // else
        // console.log('reqs',eval(reqs));
    }
    console.log("sql String : ", sql_String);
    //    sql_String+="'";
    await create(table_name, sql_String, pm, sno_found).then((d) => {
        console.log("on server" + d);
        let url = '/' + db_name + '/db';
        res.redirect(url);

    }).catch((e) => {
        res.send('error occurs' + e);
    })
})

server.get('/getalltable', (req, res) => {
    gettable().then((d) => {
        console.log(d);
        res.send(d)
    })


})

server.get('/changeName', (req, res) => {
    var table_name = req.query.prev_name;
    var new_table_name = req.query.new_name;
    // console.log(table_name);
    // console.log(new_table_name);
    // res.send('sample');
    changeName(table_name, new_table_name).then((d) => {
            res.send(d);

        })
        .catch((e) => {
            console.log(e);
            res.send('error')
        })

})

server.get('/data', (req, res) => {
    //  console.log(mess);
    //  console.log(scem);]
    let table = req.query.table;
    // console.log('table',table);

    select(table).then((data1) => {

        // console.log(data1);
        var tableEntry = [];
        tableEntry.push(data1);
        tableEntry.push(scem);
        res.send(tableEntry)
    })
})

server.post('/addMulData', async(req, res) => {
    let table = req.body.table;
    let insert_data = req.body.data;
    let n = req.body.size;
    // res.send('recived data ')
    let scem;
    let sendmess = "true"
    await scema(table).then((data) => {
        scem = data;
    })
    for (let i = 0; i < n; i++) {
        var arr = [];
        await scem.forEach(d => {
            var fill = d.Field;
            var ev = insert_data[i];
            console.log(ev);
            console.log('req', eval(ev));
            arr.push(ev[fill]);
        })
        console.log(arr);
        await insert(table, arr).then((data) => {
            console.log(data);
        }).catch((e) => {
            console.log(e);
            sendmess = 'error';
        })
    }

    res.send(sendmess);
})

server.get('/table/delete/:table', (req, res) => {
    var table = req.params.table;
    let url = '/' + selected_db + '/db/'
    console.log(table);
    deletetable(table).then((d) => {
        setTimeout(function() {
            res.redirect(url)
        }, 5000);
    }).catch((e) => {
        res.redirect(url);
    })
})

server.get('/delete/:table', (req, res) => {
    var table = req.params.table;
    console.log(table);

    dropalldata(table).then((d) => {
        console.log('resdirect');
        var url = '/table/' + table;
        console.log(url);
        res.redirect(url);
    }).catch((e) => {
        res.redirect('/');
    })
})

server.post('/%entry_delete%/', async function(req, res) {
    // table_name isprimaryKey primarykey entry_obj
    let table_name = req.body.table_name;
    let isprimaryKey = req.body.isprimaryKey;
    let primarykey = req.body.primarykey.toString();
    let entry_obj = req.body.entry_obj;
    let scema = req.body.scema;

    console.log('typeof isprimarykey : ', typeof isprimaryKey);
    console.log('table name : ', table_name);
    console.log('isprimarykey : ', isprimaryKey);
    console.log('primarykey : ', primarykey);
    console.log('entry_obj : ', entry_obj);
    console.log('scema : ', scema);

    if (isprimaryKey == 'true') {
        let condition = primarykey + '=' + "'" + entry_obj['primarykey'] + "'"
        console.log('condition : ', condition);
        delete_entry(table_name, condition).then((mess) => {
            res.send(mess);
        }).catch((err) => {
            console.log(err);
            res.send(err)
        })
    } else if (isprimaryKey == 'false') {
        let condition = "";
        console.log(entry_obj);
        let n = scema.length,
            i = 0;
        await scema.forEach(element => {
            // console.log(element.Field, ' : ', entry_obj[element.Field]);
            condition += element.Field + '=' + "'" + entry_obj[element.Field] + "'"
            if (i != n - 1)
                condition += ' AND '
            i++;
        });
        console.log('condition : ', condition);
        delete_entry(table_name, condition).then((mess) => {
                res.send(mess);
            }).catch((err) => {
                console.log(err);
                res.send('error on deltion')
            })
            // res.send('error on deltion')
    }
})

server.post('/%entry_update%/', async function(req, res) {
    let table_name = req.body.table_name;
    let isprimaryKey = req.body.isprimaryKey;
    let primarykey = req.body.primarykey.toString();
    let update_entry = req.body.update_entry;
    let entry_obj = req.body.entry_obj;

    let scema = req.body.scema;

    console.log('typeof isprimarykey : ', typeof isprimaryKey);
    console.log('table name : ', table_name);
    console.log('isprimarykey : ', isprimaryKey);
    console.log('primarykey : ', primarykey);
    console.log('update_entry : ', update_entry);
    console.log('scema : ', scema);

    let update_string = "" // pending for works


    scema.forEach((element, index) => {
        console.log('index: ', index);
        update_string += element.Field + '=' + "'" + update_entry[index] + "'";
        if (index != scema.length - 1)
            update_string += ',';
    });

    console.log('update_string : ', update_string);
    if (isprimaryKey == 'true') {
        let condition = primarykey + '=' + "'" + entry_obj['primarykey'] + "'"
        console.log('condition : ', condition);
        update_data(table_name, update_string, condition).then((mess) => {
            res.send(mess);
        }).catch((err) => {
            console.log(err);
            res.send(err)
        })
    } else if (isprimaryKey == 'false') {
        let condition = "";
        let n = scema.length,
            i = 0;
        await scema.forEach(element => {
            condition += element.Field + '=' + "'" + entry_obj[element.Field] + "'"
            if (i != n - 1)
                condition += ' AND '
            i++;
        });
        console.log('condition : ', condition);
        update_data(table_name, update_string, condition).then((mess) => {
            res.send(mess);
        }).catch((err) => {
            console.log(err);
            res.send('error on deltion')
        })
    }

})

server.get('/data_search', async(req, res) => {
    let table = req.query.table;
    let search_by = req.query.search_by;
    let search = req.query.search;

    console.log('table : ', table);
    console.log('search_by : ', search_by);
    console.log('search : ', search);

    search_data(table, search_by, search).then((data) => {
        console.log(data);
        res.send(data)
    }).catch((err) => {
        console.log(err);
        res.send('Not Found')
    })

})

server.listen(port, () => {
    console.log('hi! server is running at localhost:', port);
})

